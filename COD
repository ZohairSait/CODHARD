DES:
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class DESEncryptionExample {

    public static void main(String[] args) {
        try {
            // Generate a DES key
            SecretKey secretKey = KeyGenerator.getInstance("DES").generateKey();

            // Create a DES cipher
            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");

            // Initialize the cipher for encryption with the generated key
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            // User's message to be encrypted
            String userMessage = "Hello, this is a secret message!";

            // Encrypt the message
            byte[] encryptedBytes = cipher.doFinal(userMessage.getBytes(StandardCharsets.UTF_8));

            // Print the original and encrypted messages
            System.out.println("Original Message: " + userMessage);
            System.out.println("Encrypted Message: " + Base64.getEncoder().encodeToString(encryptedBytes));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


-------------------------


import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class AESEncryptionExample {

    public static void main(String[] args) {
        try {
            // Generate an AES key
            SecretKey secretKey = KeyGenerator.getInstance("AES").generateKey();

            // Create an AES cipher
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");

            // Initialize the cipher for encryption with the generated key
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            // User's message to be encrypted (e.g., a URL)
            String userMessage = "https://www.example.com";

            // Encrypt the message
            byte[] encryptedBytes = cipher.doFinal(userMessage.getBytes(StandardCharsets.UTF_8));

            // Print the original and encrypted messages
            System.out.println("Original Message: " + userMessage);
            System.out.println("Encrypted Message: " + Base64.getEncoder().encodeToString(encryptedBytes));

            // Decrypt the message
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decryptedBytes = cipher.doFinal(encryptedBytes);

            // Print the decrypted message
            String decryptedMessage = new String(decryptedBytes, StandardCharsets.UTF_8);
            System.out.println("Decrypted Message: " + decryptedMessage);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


-----------------


RSA:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RSA Encryption</title>
</head>
<body>
  <center>
    <h1>RSA Algorithm</h1>
    <h2>Implemented Using HTML & Javascript</h2>
    <hr>
    <table>
      <tr><td>Enter First Prime Number:</td><td><input type="number" value="53" id="p"></td></tr>
      <tr><td>Enter Second Prime Number:</td><td><input type="number" value="59" id="q"></td></tr>
      <tr><td>Enter the Message (cipher text):<br>[A=1, B=2,...]</td><td><input type="number" value="89" id="msg"></td></tr>
      <tr><td>Public Key:</td><td><p id="publickey"></p></td></tr>
      <tr><td>Exponent:</td><td><p id="exponent"></p></td></tr>
      <tr><td>Private Key:</td><td><p id="privatekey"></p></td></tr>
      <tr><td>Cipher Text:</td><td><p id="ciphertext"></p></td></tr>
      <tr><td><button onclick="RSA()">Apply RSA</button></td></tr>
    </table>
  </center>
  <script>
    function RSA() {
      var p = +document.getElementById('p').value;
      var q = +document.getElementById('q').value;
      var no = +document.getElementById('msg').value;
      var n = p * q;
      var t = (p - 1) * (q - 1);
      var e = 2;
      while (e < t && (p % e === 0 || q % e === 0)) e++;
      var d = 0;
      for (var i = 0; i < 10; i++) {
        var x = 1 + i * t;
        if (x % e == 0) {
          d = x / e;
          break;
        }
      }
      var ct = Math.pow(no, e) % n;
      document.getElementById('publickey').innerHTML = n;
      document.getElementById('exponent').innerHTML = e;
      document.getElementById('privatekey').innerHTML = d;
      document.getElementById('ciphertext').innerHTML = ct;
    }
  </script>
</body>
</html>


------------------


DH Algorithm (Diffie):
import java.math.BigInteger;
import java.security.SecureRandom;

public class DiffieHellmanKeyExchange {

    public static void main(String[] args) {
        // Shared prime (p) and base (g)
        BigInteger p = new BigInteger("23");
        BigInteger g = new BigInteger("5");

        // Alice's private key (a)
        BigInteger aPrivate = generatePrivateKey(p);

        // Bob's private key (b)
        BigInteger bPrivate = generatePrivateKey(p);

        // Alice computes her public key (A)
        BigInteger A = calculatePublicKey(g, aPrivate, p);

        // Bob computes his public key (B)
        BigInteger B = calculatePublicKey(g, bPrivate, p);

        // Key exchange
        BigInteger sharedKeyA = calculateSharedKey(B, aPrivate, p);
        BigInteger sharedKeyB = calculateSharedKey(A, bPrivate, p);

        // Display results
        System.out.println("Shared Key (Alice): " + sharedKeyA);
        System.out.println("Shared Key (Bob): " + sharedKeyB);
    }

    private static BigInteger generatePrivateKey(BigInteger p) {
        SecureRandom random = new SecureRandom();
        return new BigInteger(p.bitLength() - 1, random).add(BigInteger.ONE);
    }

    private static BigInteger calculatePublicKey(BigInteger g, BigInteger privateKey, BigInteger p) {
        return g.modPow(privateKey, p);
    }

    private static BigInteger calculateSharedKey(BigInteger publicKey, BigInteger privateKey, BigInteger p) {
        return publicKey.modPow(privateKey, p);
    }
}


-----------------


Digital Signature:
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class DigitalSignatureExample {

    public static void main(String[] args) {
        try {
            // Generate public and private keys
            KeyPair keyPair = generateKeyPair();

            // Sign a message
            String message = "This is a test message";
            byte[] signature = sign(message, keyPair.getPrivate());

            // Verify the signature
            boolean isVerified = verify(message, signature, keyPair.getPublic());

            // Display results
            System.out.println("Original Message: " + message);
            System.out.println("Signature: " + Base64.getEncoder().encodeToString(signature));
            System.out.println("Signature Verified: " + isVerified);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");
        keyPairGenerator.initialize(2048);
        return keyPairGenerator.generateKeyPair();
    }

    private static byte[] sign(String message, PrivateKey privateKey) throws Exception {
        Signature signature = Signature.getInstance("SHA256withDSA");
        signature.initSign(privateKey);
        signature.update(message.getBytes());
        return signature.sign();
    }

    private static boolean verify(String message, byte[] signature, PublicKey publicKey) throws Exception {
        Signature verifier = Signature.getInstance("SHA256withDSA");
        verifier.initVerify(publicKey);
        verifier.update(message.getBytes());
        return verifier.verify(signature);
    }
}


--------------


SHA:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class SHA1HashExample {

    public static void main(String[] args) {
        String inputText = "Hello, this is a message to hash using SHA-1";

        try {
            String sha1Hash = calculateSHA1Hash(inputText);
            System.out.println("Original Text: " + inputText);
            System.out.println("SHA-1 Hash: " + sha1Hash);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }

    private static String calculateSHA1Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] hashedBytes = md.digest(input.getBytes());

        // Convert the byte array to a hexadecimal string
        StringBuilder sb = new StringBuilder();
        for (byte b : hashedBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}


-------------------


MD5:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MD5Example {

    public static void main(String[] args) {
        String inputText = "Hello, this is a message to hash using MD5";

        try {
            String md5Hash = calculateMD5(inputText);
            System.out.println("Original Text: " + inputText);
            System.out.println("MD5 Hash: " + md5Hash);
        } catch (NoSuchAlgorithmException e) {
            e();
        }
    }

    private static String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] hashBytes = md.digest(input.getBytes());

        StringBuilder sb = new StringBuilder();
        for (byte b : hashBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}
